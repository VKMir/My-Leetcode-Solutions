class Solution {
public:
    int findGoodArrays(vector<int>& nums, int k){
        int n = nums.size();
        unordered_map<int,int> mmap;
        int count = 0;
        int i = 0, j = 0;
        while(i <= j && j < n){
            ++mmap[nums[j]];
            while(mmap.size() > k){
                --mmap[nums[i]];
                if(mmap[nums[i]] == 0) mmap.erase(nums[i]);
                ++i;
            }
            count += j - i + 1;
            ++j;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return findGoodArrays(nums, k) - findGoodArrays(nums,k - 1);
    }
};


Time Complexity: O(n)
Space Complexity: O(1)
