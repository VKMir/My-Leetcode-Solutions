class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int rows = board.size();
        int cols = board[0].size();
        unordered_map<int, unordered_set<char>> r, c;
        map<pair<int, int>, unordered_set<char>> sq;
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(board[i][j] == '.') continue;
                pair<int, int> sq_indices = {i / 3, j / 3};
                if(r[i].count(board[i][j]) || c[j].count(board[i][j]) || sq[sq_indices].count(board[i][j]))
                return false;
                r[i].insert(board[i][j]);
                c[j].insert(board[i][j]);
                sq[sq_indices].insert(board[i][j]);
            }
        }
        return true;
    }
};


Time Complexity: O(1)
Space Complexity: O(1)
