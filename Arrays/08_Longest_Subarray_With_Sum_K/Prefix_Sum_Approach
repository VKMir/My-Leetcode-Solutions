class Solution {
  public:
    int longestSubarray(vector<int>& arr, int k) {
        // code here
        int n = arr.size();
        unordered_map<int, int> mmap;
        int sum = 0;
        int max_len = 0;
        for(int i = 0; i < n; i++){
            sum += arr[i];
            if(sum == k){
                max_len = max(max_len, i+1);
            }
            int rem = sum - k;
            if(mmap.find(rem) != mmap.end()){
                max_len = max(max_len, i - mmap[rem]);
            }
            if(mmap.find(sum) == mmap.end()){
                mmap[sum] = i;
            }
        }
        return max_len;
    }
};

Time Complexity: O(n)
Space Complexity: O(n)
