class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        int beg = 0, end = rows - 1;
        int row_index = -1, col_index = -1;
        while(beg <= end){
            int mid = (beg + end) / 2;
            if(matrix[mid][0] == target){
                row_index = mid;
                break;
            }else if(matrix[mid][0] < target && matrix[mid][cols -1] >= target){
                row_index = mid;
                break;
            }else if(matrix[mid][0] < target){
                beg = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        if(row_index == -1) return false;
        beg = 0, end = cols - 1;
        while(beg <= end){
            int mid = (beg + end) / 2;
                if(matrix[row_index][mid] == target){
                    col_index = mid;
                    break;
                }else if(matrix[row_index][mid] < target){
                    beg = mid + 1;
                }else{
                    end = mid - 1;
                }
        }
        if(col_index == -1) return false;
        return true;
    }
};


Time Complexity: O(log m + log n)
Space Complexity: O(1)
