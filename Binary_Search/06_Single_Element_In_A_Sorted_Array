class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0]; 
        if(nums[0] != nums[1]) return nums[0];
        if(nums[n - 1] != nums[n - 2]) return nums[n - 1];
        int beg = 0, end = n - 1;
        int ans = -1;
        while(beg <= end){
            int mid = (beg + end)/2;
            if(mid > 0 && mid < n - 1 && nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1]) return nums[mid];
            if(mid % 2 == 0){
                if(nums[mid] != nums[mid + 1]){
                    end = mid - 1;
                }else{
                    beg = mid + 1;
                }
            }else{
                if(nums[mid] != nums[mid - 1]){
                    end = mid - 1;
                }else{
                    beg = mid + 1;
                }
        }
        }
        return ans;
    }
};


Time Complexity: O(log n)
Space Compelexity: O(1) 
