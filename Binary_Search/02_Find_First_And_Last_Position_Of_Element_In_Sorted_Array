class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> ans(2);
        ans[0] = binarySearch(nums, target, true);
        ans[1] = binarySearch(nums, target, false);
        return ans;
    }
    int binarySearch(vector<int>& nums, int target, bool searchStart){
        int n = nums.size();
        int beg = 0, end = n - 1;
        int ans = -1;
        while(beg <= end){
            int mid = (beg + end)/2;
            if(nums[mid] < target){
                beg = mid + 1;
            }else if(nums[mid] > target){
                end = mid - 1;
            }else{
                ans = mid;
                if(searchStart){
                    end = mid - 1;
                }else{
                    beg = mid + 1;
                }
            }
        }
        return ans;
    }
};


Time complexity: O(log n)
Space Complexity: O(1)
