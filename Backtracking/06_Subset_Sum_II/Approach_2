class Solution {
public:
    void findPowerSet(vector<int>& nums, int n, int index, vector<int>& set, vector<vector<int>>& ans){
       if(index == n){
        ans.push_back(set);
        return;
       }
        set.push_back(nums[index]);
        findPowerSet(nums, n, index + 1, set, ans);
        set.pop_back();
        int next = index + 1;
        while(next < n && nums[next] == nums[index]) ++next;
        findPowerSet(nums, n, next, set, ans);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        vector<int> set;
        findPowerSet(nums, n, 0, set, ans);
        return ans;
    }
};


Time Complexity: O(2^n)
Space Complexity: O(n)
