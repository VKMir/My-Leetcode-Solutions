class Solution {
public:
    void findWords(string digits, int n, int index, unordered_map<char, string>& mmap, string& word, vector<string>& ans){
        if(index == n){
            ans.push_back(word);
            return;
        }
        string str = mmap[digits[index]];
        for(int i = 0; i < str.length(); i++){
            word += str[i];
            findWords(digits, n, index + 1, mmap, word, ans);
            word.pop_back();
        }
    } 
    vector<string> letterCombinations(string digits) {
        if(digits == "") return {};
        int n = digits.size();
        unordered_map<char, string> mmap = {{'2', "abc"}, {'3', "def"}, {'4', "ghi"}, {'5', "jkl"}, {'6', "mno"}, {'7', "pqrs"}, {'8', "tuv"}, {'9', "wxyz"}};
        string word = "";
        vector<string> ans;
        findWords(digits, n, 0, mmap, word, ans);
        return ans;    
    }
};


Time Complexity: O(4^n)
Space Complexity: O(4^n)
